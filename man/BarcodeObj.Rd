% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/barcodeObj.R
\docType{class}
\name{BarcodeObj}
\alias{BarcodeObj}
\title{BarcodeObj object}
\description{
A S3 object holds the barcode data and sample metadata. A set of operations
can be applied to the BarcodeObj object for quality control and selecting
barcodes/samples. subset.
}
\details{
The BarcodeObj object is a S3 object, which is a list under hood with class
name "BarcodeObj". There can be three elements in the BarcodeObj object,
which can be access by "$" operator, they are "messyBc", "cleanBc" and
"metadata". A BarcodeObj object can be generated by \code{bc_extract}
function. The \code{bc_extract} function can use various data types as input,
such as data.frame, fastq files and ShortReadQ.

"messyBc" is a list holds the barcodes sequence before applying filtering,
where each element is a `data.frame` corresponding to the successive samples.
Each `data.frame` has 5 columns: 1. "reads_seq": full read sequence before
parsing. 2. "match_seq": the sequence matched by pattern. 3. "umi_seq"
(optional): UMI sequence, applicable when there is a UMI in `pattern` and
`pattern_type` argument. 4. "barcode_seq": barcode sequence. 5. "count": how
many reads a barcode has. 

"cleanBc" is a list holds the barcodes sequence after applying filtering,
where each element is a `data.frame` corresponding to the successive samples.
The "cleanBc" element contains 2 columns 1. "barcode_seq": barcode sequence
2. "counts": reads count or UMI count.
}
\examples{

#######
# Get BarcodeObj using fastq file
fq_file <- system.file("extdata", "simple.fq", package="CellBarcode")
library(ShortRead)
bc_extract(fq_file, pattern = "AAAAA(.*)CCCCC")

#######
# data manipulation on BarcodeObj object
data(bc_obj)

bc_obj

# Select barcodes
bc_subset(bc_obj, barcode = c("AACCTT", "AACCTT"))
bc_obj[c("AGAG", "AAAG"), ]

# Select samples by meta data
bc_meta(bc_obj)$phenotype <- c("l", "b")
bc_meta(bc_obj)
bc_subset(bc_obj, phenotype == "l")

bc_obj[, phenotype == "l"]

# Select samples by sample name
bc_obj[, "test1"]
bc_obj[, c("test1", "test2")]
bc_subset(bc_obj, sample = "sample1_rep1", barcode = c("AACCTT", "AACCTT"))

# Apply barcodes black list
bc_subset(
bc_obj,
    sample = c("sample1_rep1", "sample1_rep2"),
    barcode = c("AACCTT"))

# Join two samples with different barcode sets
bc_obj["AGAG", "test1"] + bc_obj["AAAG", "test1"]

# Join two samples with overlap barcodes
bc_obj_join <- bc_obj["AGAG", "test1"] + bc_obj["AGAG", "test1"]
bc_obj_join
# The same barcode will merged after applying bc_cure_depth()
bc_cure_depth(bc_obj_join)

# Remove barcodes
bc_obj
bc_obj - "AAAG"

# Select barcodes in white list
bc_obj
bc_obj * "AAAG"
###
}
