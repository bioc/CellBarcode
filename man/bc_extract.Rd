% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractBarcode.R
\name{bc_extract}
\alias{bc_extract}
\alias{bc_extract.data.frame}
\alias{bc_extract.ShortReadQ}
\alias{bc_extract.DNAStringSet}
\alias{bc_extract.integer}
\alias{bc_extract.character}
\alias{bc_extract.list}
\title{Extract barcode from reads}
\usage{
bc_extract(...)

\method{bc_extract}{data.frame}(
  x,
  pattern = "",
  sample_name = NULL,
  maxLDist = 0,
  pattern_type = c(barcode = 1),
  costs = list(sub = 1, ins = 99, del = 99),
  ordered = TRUE,
  ...
)

\method{bc_extract}{ShortReadQ}(
  x,
  pattern = "",
  sample_name = NULL,
  maxLDist = 0,
  pattern_type = c(barcode = 1),
  costs = list(sub = 1, ins = 99, del = 99),
  ordered = TRUE,
  ...
)

\method{bc_extract}{DNAStringSet}(
  x,
  pattern = "",
  sample_name = NULL,
  maxLDist = 0,
  pattern_type = c(barcode = 1),
  costs = list(sub = 1, ins = 99, del = 99),
  ordered = TRUE,
  ...
)

\method{bc_extract}{integer}(
  x,
  pattern = "",
  sample_name = NULL,
  maxLDist = 0,
  pattern_type = c(barcode = 1),
  costs = list(sub = 1, ins = 99, del = 99),
  ordered = TRUE,
  ...
)

\method{bc_extract}{character}(
  file,
  pattern = "",
  sample_name = basename(file),
  metadata = NULL,
  maxLDist = 0,
  pattern_type = c(barcode = 1),
  costs = list(sub = 1, ins = 99, del = 99),
  ordered = TRUE,
  ...
)

\method{bc_extract}{list}(
  x,
  pattern = "",
  sample_name = NULL,
  metadata = NULL,
  maxLDist = 0,
  pattern_type = c(barcode = 1),
  costs = list(sub = 1, ins = 99, del = 99),
  ordered = TRUE,
  ...
)
}
\arguments{
\item{...}{Additional arguments}

\item{x}{A single or a list of fastq file, ShortReadQ, DNAStringSet,
data.frame, or named integer.}

\item{pattern}{A single character string, specifying the regular expression
with capture to match the barcode which capture pattern.}

\item{sample_name}{A string vector, applicable when x is list or fastq file
vector. This argument specifies the sample names. If this argument is not
provided, then the list names of the x will be used, or the file name will be
used.}

\item{maxLDist}{A integer. The mismatch threshold for barcode matching, when
maxLDist is 0, the \code{\link[stringr::str_match]{stringr::str_match}}  is
invoked, otherwise \code{\link[utils::aregexec]{utils::aregexec}} is invoked.}

\item{pattern_type}{A vector. It defines the barcode (and UMI) capture
group. See Details.}

\item{costs}{A named list, applicable when maxLDist > 0, specifying the
weight for each mismatch events while matching the barcode using pattern,
with names of sub (substitution), ins (insertion), del (deletion). The
default value is \code{list(sub = 1, ins = 99, del = 99)}.}

\item{ordered}{A bool value. if the value is true, then the return barcodes
(UMI-barcode tags) are sorted by the reads counts.}

\item{file}{A single or a vector of character string of Fastq file name.}

\item{metadata}{A data.frame with each row of a sample, each column is a
meta data record.}
}
\value{
This function returns a BarcodeObj object if the input is a list or a
vector of Fastq files, otherwise it returns a data.frame. In the later case
the data.frame has 5 columns:
\enumerate{
  \item reads_seq: sequence of the reads before parsing.
  \item match_seq: the sequence among read matched by pattern.
  \item umi_seq (optional): UMI sequence, applicable when there is UMI in
     `pattern` and `pattern_type` argument.
  \item barcode_seq: barcode sequence.
  \item count: reads number.
}

The match_seq is part of reads_seq; The umi_seq and barcode_seq are part of
match_seq. The reads_seq is the unique id for each record (row), but the
match_seq, umi_seq or barcode_seq may not be unique, due to the potential
variation in the outside the region of matched sequence.
}
\description{
This function identifies the barcodes and (or) UMI from the seqeunces.
\code{pattern} and \code{pattern_type} arguments are necessary, which provide
the barcode (and UMI) pattern and their location within the sequences.
}
\details{
The pattern argument is a regular expression, the capture operation \code{()}
shows the barcode or UMI. pattern_type argument is the annotation of the
capture pattern, shows which captured patteern is UMI or the barcode. In the
example:
\preformatted{
([ACTG]{3})TCGATCGATCGA([ACTG]+)ATCGATCGATC
|--- starts with 3 base pairs UMI
           |--- constant sequence in the backbone
                       |--- flexible barcode seqeunces.
                               |--- 3' constant sequence
}

In the UMI pattern \code{[ACGT]{3}}, the \code{[ACGT]} means it can be one of
the "A", "C", "G" and "T", and the \code{{3}} means there are 12
\code{[ACGT]}. In the barcode pattern \code{[ACGT]+}, the \code{+} denotes
that there is at least one of the \code{[ACGT]}.
}
\examples{
fq_file <- system.file("extdata", "simple.fq", package="Bc")

library(ShortRead)

# barcode from fastq file
bc_extract(fq_file, pattern = "AAAAA(.*)CCCCC")

# barcode from ShortReadQ object
sr <- readFastq(fq_file)  # ShortReadQ
bc_extract(sr, pattern = "AAAAA(.*)CCCCC")

# barcode from DNAStringSet object
ds <- sr@sread  # DNAStringSet
bc_extract(ds, pattern = "AAAAA(.*)CCCCC")

# barcode from integer vector
iv <- tables(ds, n = Inf)$top # integer vector
bc_extract(iv, pattern = "AAAAA(.*)CCCCC")

# barcode from data.frame 
df <- data.frame(seq = names(iv), freq = as.character(iv)) # data.frame
bc_extract(df, pattern = "AAAAA(.*)CCCCC")

# barcode from list of DNAStringSet
l <- list(sample1 = ds, sample2 = ds) # list
bc_extract(l, pattern = "AAAAA(.*)CCCCC")

# Extract UMI and barcode
d1 <- data.frame(
  seq = c(
    "ACTTCGATCGATCGAAAAGATCGATCGATC",
    "AATTCGATCGATCGAAGAGATCGATCGATC",
    "CCTTCGATCGATCGAAGAAGATCGATCGATC",
    "TTTTCGATCGATCGAAAAGATCGATCGATC",
    "AAATCGATCGATCGAAGAGATCGATCGATC",
    "CCCTCGATCGATCGAAGAAGATCGATCGATC",
    "GGGTCGATCGATCGAAAAGATCGATCGATC",
    "GGATCGATCGATCGAAGAGATCGATCGATC",
    "ACTTCGATCGATCGAACAAGATCGATCGATC",
    "GGTTCGATCGATCGACGAGATCGATCGATC",
    "GCGTCCATCGATCGAAGAAGATCGATCGATC"
    ),
  freq = c(
    30, 60, 9, 10, 14, 5, 10, 30, 6, 4 , 6
    )
  ) 
# barcode backbone with UMI and barcode
pattern <- "([ACTG]{3})TCGATCGATCGA([ACTG]+)ATCGATCGATC"
bc_extract(
  list(test = d1), 
  pattern, 
  sample_name=c("test"), 
  pattern_type=c(UMI=1, barcode=2))

###
}
