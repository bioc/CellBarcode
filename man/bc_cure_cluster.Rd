% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/correctBarcode.R
\name{bc_cure_cluster}
\alias{bc_cure_cluster}
\title{Merges barcodes by editing distance}
\usage{
bc_cure_cluster(
  barcodeObj,
  distance = 1,
  dist_method = "hamm",
  merge_method = "greedy",
  barcode_n = 10000,
  dist_costs = list(replace = 1, insert = 1, delete = 1)
)
}
\arguments{
\item{barcodeObj}{A BarcodeObj object.}

\item{distance}{A single or a vector of integer, specifying the editing
distance threshold of merging two similar barcode sequences.}

\item{dist_method}{A  character string, specifying the distance algorithm used
to evaluate the barcodes similarity. It can be "hamm" for Hamming distance or
"leven" for Levenshtein distance.}

\item{merge_method}{A character string specifying the algorithm used to
perform the clustering merging of two barcodes. Currently only "greedy" is
available, in this case, the least abundant barcode is merged to the most
abundant ones.}

\item{barcode_n}{A single or vector of integer, specifying the max sequences
number to get. When the most abundant barcodes number reaches this number
the merging finished, and all the rest sub-abundent sequences are
discarded.}

\item{dist_costs}{A list, the costs of the events when calculate distance
between to barcode sequences, applicable when Levenshtein distance is 
applied. The names of vector can be of "insert", "delete" and "replace",
specifying the weight of insertion, deletion, replacement events
respectively. The default cost for each evens is 1.}
}
\value{
A BarcodeObj object with cleanBc element updated.
}
\description{
bc_cure_cluster performs the clustering of barcodes by editing distance,
then merge the barcodes with similar sequence. This function is only
applicable for the BarcodeObj object with a cleanBc element.
}
\examples{
data(bc_obj)

d1 <- data.frame(
    seq = c(
        "ACTTCGATCGATCGAAAAGATCGATCGATC",
        "AATTCGATCGATCGAAGAGATCGATCGATC",
        "CCTTCGATCGATCGAAGAAGATCGATCGATC",
        "TTTTCGATCGATCGAAAAGATCGATCGATC",
        "AAATCGATCGATCGAAGAGATCGATCGATC",
        "CCCTCGATCGATCGAAGAAGATCGATCGATC",
        "GGGTCGATCGATCGAAAAGATCGATCGATC",
        "GGATCGATCGATCGAAGAGATCGATCGATC",
        "ACTTCGATCGATCGAACAAGATCGATCGATC",
        "GGTTCGATCGATCGACGAGATCGATCGATC",
        "GCGTCCATCGATCGAAGAAGATCGATCGATC"
        ),
    freq = c(
        30, 60, 9, 10, 14, 5, 10, 30, 6, 4 , 6
        )
    )

pattern <- "([ACTG]{3})TCGATCGATCGA([ACTG]+)ATCGATCGATC"
bc_obj <- bc_extract(list(test = d1), pattern, sample_name=c("test"), 
    pattern_type=c(UMI=1, barcode=2))

# Remove barcodes with depth <= 5
(bc_cured <- bc_cure_depth(bc_obj, depth=5))

# Do the clustering, merge the less abundent barcodes to the more abundent
# one by hamming distance <= 1 
bc_cure_cluster(bc_cured, distance = 1)

# Levenshtein distance <= 1
bc_cure_cluster(bc_cured, distance = 2, dist_method = "leven",
    dist_costs = list("insert" = 2, "replace" = 1, "delete" = 2))

###
}
